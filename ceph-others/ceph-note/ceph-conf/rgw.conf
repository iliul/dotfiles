
[global]
mon_initial_members = onest
mon_host = 192.168.10.146
auth_cluster_required = cephx
auth_service_required = cephx
auth_client_required = cephx
osd_crush_chooseleaf_type = 0
osd_pool_default_size = 1
osd_pool_default_min_size = 1
osd_crush_update_on_start = False


rgw_dns_s3website_name = eos.cloud.com
rgw dns name = eos.cloud.com
rgw_enable_static_website = true



osd_max_object_name_len = 460  #目录当磁盘
osd_max_object_namespace_len = 64

mkdir /var/local/osd1 
chmod 777 -R  /var/local/osd1 
ceph-deploy --overwrite-conf  osd prepare yly-test2:/var/local/osd1
ceph-deploy --overwrite-conf  osd activate yly-test2:/var/local/osd1


[client.rgw.node1]
host = ceph20
rgw thread pool size = 1000
rgw_frontends = "civetweb port=80"
debug rgw = 20
rgw_enable_ops_log = true
rgw_enable_usage_log = true
rgw_user_quota_bucket_sync_interval = 180
rgw_user_quota_sync_interval = 600
rgw_user_quota_sync_wait_time = 600
rgw_gc_obj_min_wait = 660
rgw_gc_processor_max_time = 600
rgw_gc_processor_period = 600
rgw thread pool size = 500
rgw usage max user shards = 8
rgw data log num shards = 32


/usr/bin/radosgw -f --cluster ceph --name client.rgw.rgw1 --setuser ceph --setgroup ceph

chmod +777 /run/ceph


[client.rgw.node1]
keyring = /var/lib/ceph/radosgw/ceph-rgw.node1/keyring
host = node1
rgw dns name = demo.ceph.work
rgw frontends = fastcgi
rgw socket path = /var/run/ceph/ceph-client.radosgw.sock
log file = /var/log/ceph/radosgw.log
rgw print continue = false
rgw content length compat = true


worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 0;
    sendfile        on;
    keepalive_timeout  65;
    #gzip  on;
    server {
        listen       80;
        server_name  demo.ceph.work;
        #access_log  logs/host.access.log  main;
        location / {
        fastcgi_pass_header Authorization;
        fastcgi_pass_request_headers on;
        fastcgi_param QUERY_STRING  $query_string;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_param  CONTENT_TYPE $content_type;
        if ($request_method = PUT) {
            rewrite ^ /PUT$request_uri;
        }
        include fastcgi_params;
        fastcgi_pass unix:/var/run/ceph/ceph-client.radosgw.sock;
        }
        location /PUT/ {
        internal;
        fastcgi_pass_header Authorization;
        fastcgi_pass_request_headers on;
        include fastcgi_params;
        fastcgi_param QUERY_STRING  $query_string;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_param  CONTENT_TYPE $content_type;
        fastcgi_pass unix:/var/run/ceph/ceph-client.radosgw.sock;
        }
   }
 }
